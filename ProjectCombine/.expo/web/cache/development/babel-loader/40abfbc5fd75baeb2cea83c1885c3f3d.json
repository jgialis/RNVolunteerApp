{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/JoshGialis/Desktop/CSE LOCAL 120/CSE120/ProjectCombine/Components/main.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { fetchUser } from \"../redux/actions/index.js\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport useCachedResources from \"../hooks/useCachedResources\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport Navigation from \"../navigation\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport DrawerNavigator from \"../navigation/DrawerNavigator\";\nimport NotFoundScreen from \"../Screens/NotFoundScreen\";\nimport { ProfileScreen } from \"../Screens/ProfileScreen\";\nvar Stack = createStackNavigator();\nexport var main = function (_Component) {\n  _inherits(main, _Component);\n\n  var _super = _createSuper(main);\n\n  function main() {\n    _classCallCheck(this, main);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(main, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchUser();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var currentUser = this.props.currentUser;\n      console.log(currentUser);\n\n      if (currentUser == undefined) {\n        return React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 14\n          }\n        });\n      }\n\n      return React.createElement(Stack.Navigator, {\n        initialRouteName: \"root\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 7\n        }\n      }, React.createElement(Stack.Screen, {\n        name: \"Root\",\n        component: DrawerNavigator,\n        options: {\n          headerShown: false\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return main;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    currentUser: store.userState.currentUser\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    fetchUser: fetchUser\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(main);","map":{"version":3,"sources":["/Users/JoshGialis/Desktop/CSE LOCAL 120/CSE120/ProjectCombine/Components/main.js"],"names":["React","Component","connect","bindActionCreators","fetchUser","NavigationContainer","StatusBar","SafeAreaProvider","useCachedResources","useColorScheme","Navigation","createStackNavigator","DrawerNavigator","NotFoundScreen","ProfileScreen","Stack","main","props","currentUser","console","log","undefined","headerShown","mapStateToProps","store","userState","mapDispatchProps","dispatch"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,SAAT;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AAEA,OAAOC,kBAAP;AACA,OAAOC,cAAP;AACA,OAAOC,UAAP;AAEA,SAASC,oBAAT,QAAqC,yBAArC;AACA,OAAOC,eAAP;AACA,OAAOC,cAAP;AAEA,SAASC,aAAT;AAGA,IAAMC,KAAK,GAAGJ,oBAAoB,EAAlC;AACA,WAAaK,IAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,6BAAoB;AAClB,WAAKC,KAAL,CAAWb,SAAX;AACD;AAHH;AAAA;AAAA,WAIE,kBAAS;AAAA,UACCc,WADD,GACiB,KAAKD,KADtB,CACCC,WADD;AAMPC,MAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;;AACA,UAAIA,WAAW,IAAIG,SAAnB,EAA8B;AAC5B,eAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD,aAKE,oBAAC,KAAD,CAAO,SAAP;AAAiB,QAAA,gBAAgB,EAAC,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD,CAAO,MAAP;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,SAAS,EAAET,eAFb;AAGE,QAAA,OAAO,EAAE;AAAEU,UAAAA,WAAW,EAAE;AAAf,SAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CALF;AAmBD;AAjCH;;AAAA;AAAA,EAA0BrB,SAA1B;;AAmCA,IAAMsB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCN,IAAAA,WAAW,EAAEM,KAAK,CAACC,SAAN,CAAgBP;AADK,GAAZ;AAAA,CAAxB;;AAIA,IAAMQ,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,QAAD;AAAA,SACvBxB,kBAAkB,CAAC;AAAEC,IAAAA,SAAS,EAATA;AAAF,GAAD,EAAgBuB,QAAhB,CADK;AAAA,CAAzB;;AAGA,eAAezB,OAAO,CAACqB,eAAD,EAAkBG,gBAAlB,CAAP,CAA2CV,IAA3C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Text, View } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { fetchUser } from \"../redux/actions/index.js\";\nimport { NavigationContainer } from '@react-navigation/native';\n\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from '../hooks/useCachedResources';\nimport useColorScheme from '../hooks/useColorScheme';\nimport Navigation from '../navigation';\n\nimport { createStackNavigator } from '@react-navigation/stack';\nimport DrawerNavigator from '../navigation/DrawerNavigator';\nimport NotFoundScreen from '../Screens/NotFoundScreen';\n\nimport { ProfileScreen } from '../Screens/ProfileScreen'\n\n\nconst Stack = createStackNavigator();\nexport class main extends Component {\n  componentDidMount() {\n    this.props.fetchUser();\n  }\n  render() {\n    const { currentUser } = this.props;\n\n    // const isLoadingComplete = useCachedResources();\n    // const colorScheme = useColorScheme();\n    \n    console.log(currentUser);\n    if (currentUser == undefined) {\n      return <View></View>;\n    }\n    return(\n      // <View style={{ flex: 1, justifyContent: \"center\" }}>\n      //   <Text>{currentUser.name} is logged in</Text>\n      // </View>\n\n      <Stack.Navigator initialRouteName=\"root\">\n        <Stack.Screen \n          name=\"Root\" \n          component={DrawerNavigator}\n          options={{ headerShown: false }} \n        />\n      </Stack.Navigator>\n\n    //   <NavigationContainer\n    //   linking={LinkingConfiguration}\n    //   theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n    //   <RootNavigator />\n    // </NavigationContainer>\n    );\n  }\n}\nconst mapStateToProps = (store) => ({\n  currentUser: store.userState.currentUser,\n});\n\nconst mapDispatchProps = (dispatch) =>\n  bindActionCreators({ fetchUser }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchProps)(main);\n"]},"metadata":{},"sourceType":"module"}