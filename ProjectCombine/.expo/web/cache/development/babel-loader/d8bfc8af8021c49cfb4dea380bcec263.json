{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/sun/CSE/CSE120/Project/ProjectCombine/Components/main.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { fetchUser } from \"../redux/actions/index.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport useCachedResources from \"../hooks/useCachedResources\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport Navigation from \"../navigation\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport DrawerNavigator from \"../navigation/DrawerNavigator\";\nimport NotFoundScreen from \"../Screens/NotFoundScreen\";\nvar Stack = createStackNavigator();\nexport var main = function (_Component) {\n  _inherits(main, _Component);\n\n  var _super = _createSuper(main);\n\n  function main() {\n    _classCallCheck(this, main);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(main, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchUser();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var currentUser = this.props.currentUser;\n      console.log();\n\n      if (currentUser == undefined) {\n        return React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 14\n          }\n        });\n      }\n\n      return React.createElement(NavigationContainer, {\n        linking: LinkingConfiguration,\n        theme: colorScheme === 'dark' ? DarkTheme : DefaultTheme,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 7\n        }\n      }, React.createElement(RootNavigator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return main;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    currentUser: store.userState.currentUser\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    fetchUser: fetchUser\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(main);","map":{"version":3,"sources":["/home/sun/CSE/CSE120/Project/ProjectCombine/Components/main.js"],"names":["React","Component","connect","bindActionCreators","fetchUser","StatusBar","SafeAreaProvider","useCachedResources","useColorScheme","Navigation","createStackNavigator","DrawerNavigator","NotFoundScreen","Stack","main","props","currentUser","console","log","undefined","LinkingConfiguration","colorScheme","DarkTheme","DefaultTheme","mapStateToProps","store","userState","mapDispatchProps","dispatch"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,SAAT;AAEA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AAEA,OAAOC,kBAAP;AACA,OAAOC,cAAP;AACA,OAAOC,UAAP;AAEA,SAASC,oBAAT,QAAqC,yBAArC;AACA,OAAOC,eAAP;AACA,OAAOC,cAAP;AAGA,IAAMC,KAAK,GAAGH,oBAAoB,EAAlC;AACA,WAAaI,IAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,6BAAoB;AAClB,WAAKC,KAAL,CAAWX,SAAX;AACD;AAHH;AAAA;AAAA,WAIE,kBAAS;AAAA,UACCY,WADD,GACiB,KAAKD,KADtB,CACCC,WADD;AAMPC,MAAAA,OAAO,CAACC,GAAR;;AACA,UAAIF,WAAW,IAAIG,SAAnB,EAA8B;AAC5B,eAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD,aAIE,oBAAC,mBAAD;AACA,QAAA,OAAO,EAAEC,oBADT;AAEA,QAAA,KAAK,EAAEC,WAAW,KAAK,MAAhB,GAAyBC,SAAzB,GAAqCC,YAF5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGA,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHA,CAJF;AAUD;AAxBH;;AAAA;AAAA,EAA0BtB,SAA1B;;AA0BA,IAAMuB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCT,IAAAA,WAAW,EAAES,KAAK,CAACC,SAAN,CAAgBV;AADK,GAAZ;AAAA,CAAxB;;AAIA,IAAMW,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,QAAD;AAAA,SACvBzB,kBAAkB,CAAC;AAAEC,IAAAA,SAAS,EAATA;AAAF,GAAD,EAAgBwB,QAAhB,CADK;AAAA,CAAzB;;AAGA,eAAe1B,OAAO,CAACsB,eAAD,EAAkBG,gBAAlB,CAAP,CAA2Cb,IAA3C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Text, View } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { fetchUser } from \"../redux/actions/index.js\";\n\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from '../hooks/useCachedResources';\nimport useColorScheme from '../hooks/useColorScheme';\nimport Navigation from '../navigation';\n\nimport { createStackNavigator } from '@react-navigation/stack';\nimport DrawerNavigator from '../navigation/DrawerNavigator';\nimport NotFoundScreen from '../Screens/NotFoundScreen';\n\n\nconst Stack = createStackNavigator();\nexport class main extends Component {\n  componentDidMount() {\n    this.props.fetchUser();\n  }\n  render() {\n    const { currentUser } = this.props;\n\n    // const isLoadingComplete = useCachedResources();\n    // const colorScheme = useColorScheme();\n    \n    console.log();\n    if (currentUser == undefined) {\n      return <View></View>;\n    }\n    return(\n      // <View style={{ flex: 1, justifyContent: \"center\" }}>\n      //   <Text>{currentUser.name} is logged in</Text>\n      // </View>\n      <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n    );\n  }\n}\nconst mapStateToProps = (store) => ({\n  currentUser: store.userState.currentUser,\n});\n\nconst mapDispatchProps = (dispatch) =>\n  bindActionCreators({ fetchUser }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchProps)(main);\n"]},"metadata":{},"sourceType":"module"}