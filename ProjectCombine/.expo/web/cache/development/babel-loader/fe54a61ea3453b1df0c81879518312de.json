{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/sun/CSE/CSE120/Project/ProjectCombine/Components/main.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { fetchUser } from \"../redux/actions/index.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport useCachedResources from \"../hooks/useCachedResources\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport Navigation from \"../navigation\";\nexport var main = function (_Component) {\n  _inherits(main, _Component);\n\n  var _super = _createSuper(main);\n\n  function main() {\n    _classCallCheck(this, main);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(main, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchUser();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var currentUser = this.props.currentUser;\n      var isLoadingComplete = useCachedResources();\n      var colorScheme = useColorScheme();\n      console.log();\n\n      if (currentUser == undefined) {\n        return React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 14\n          }\n        });\n      } else if (!isLoadingComplete) {\n          return null;\n        } else {\n          return React.createElement(SafeAreaProvider, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 11\n            }\n          }, React.createElement(Navigation, {\n            colorScheme: colorScheme,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 13\n            }\n          }), React.createElement(StatusBar, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 13\n            }\n          }));\n        }\n    }\n  }]);\n\n  return main;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    currentUser: store.userState.currentUser\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    fetchUser: fetchUser\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(main);","map":{"version":3,"sources":["/home/sun/CSE/CSE120/Project/ProjectCombine/Components/main.js"],"names":["React","Component","connect","bindActionCreators","fetchUser","StatusBar","SafeAreaProvider","useCachedResources","useColorScheme","Navigation","main","props","currentUser","isLoadingComplete","colorScheme","console","log","undefined","mapStateToProps","store","userState","mapDispatchProps","dispatch"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,SAAT;AAEA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AAEA,OAAOC,kBAAP;AACA,OAAOC,cAAP;AACA,OAAOC,UAAP;AAEA,WAAaC,IAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,6BAAoB;AAClB,WAAKC,KAAL,CAAWP,SAAX;AACD;AAHH;AAAA;AAAA,WAIE,kBAAS;AAAA,UACCQ,WADD,GACiB,KAAKD,KADtB,CACCC,WADD;AAGP,UAAMC,iBAAiB,GAAGN,kBAAkB,EAA5C;AACA,UAAMO,WAAW,GAAGN,cAAc,EAAlC;AAEAO,MAAAA,OAAO,CAACC,GAAR;;AACA,UAAIJ,WAAW,IAAIK,SAAnB,EAA8B;AAC5B,eAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFD,MAMO,IAAI,CAACJ,iBAAL,EAAwB;AAC3B,iBAAO,IAAP;AACD,SAFI,MAGA;AACH,iBACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,UAAD;AAAY,YAAA,WAAW,EAAEC,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,CADF;AAMD;AACJ;AA5BH;;AAAA;AAAA,EAA0Bb,SAA1B;;AA8BA,IAAMiB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCP,IAAAA,WAAW,EAAEO,KAAK,CAACC,SAAN,CAAgBR;AADK,GAAZ;AAAA,CAAxB;;AAIA,IAAMS,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,QAAD;AAAA,SACvBnB,kBAAkB,CAAC;AAAEC,IAAAA,SAAS,EAATA;AAAF,GAAD,EAAgBkB,QAAhB,CADK;AAAA,CAAzB;;AAGA,eAAepB,OAAO,CAACgB,eAAD,EAAkBG,gBAAlB,CAAP,CAA2CX,IAA3C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Text, View } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { fetchUser } from \"../redux/actions/index.js\";\n\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from '../hooks/useCachedResources';\nimport useColorScheme from '../hooks/useColorScheme';\nimport Navigation from '../navigation';\n\nexport class main extends Component {\n  componentDidMount() {\n    this.props.fetchUser();\n  }\n  render() {\n    const { currentUser } = this.props;\n\n    const isLoadingComplete = useCachedResources();\n    const colorScheme = useColorScheme();\n    \n    console.log();\n    if (currentUser == undefined) {\n      return <View></View>;\n    }\n      // <View style={{ flex: 1, justifyContent: \"center\" }}>\n      //   <Text>{currentUser.name} is logged in</Text>\n      // </View>\n      else if (!isLoadingComplete) {\n        return null;\n      } \n      else {\n        return (\n          <SafeAreaProvider>\n            <Navigation colorScheme={colorScheme} />\n            <StatusBar />\n          </SafeAreaProvider>\n        );\n      }\n  }\n}\nconst mapStateToProps = (store) => ({\n  currentUser: store.userState.currentUser,\n});\n\nconst mapDispatchProps = (dispatch) =>\n  bindActionCreators({ fetchUser }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchProps)(main);\n"]},"metadata":{},"sourceType":"module"}